buildscript {
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id "dev.combination.dotnet" version "1.0.14"
    id "net.minecraftforge.gradle" version "5.+"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'maven-publish'
apply plugin: 'java'

jarJar.enable()

String mod_version_full = "${project.mc_ver}_${project.ver}"
String ForgeVersion = "${project.mc_ver}-${project.forge_ver}"

group = 'com.algorithmlx'
version = "${mod_version_full}"

java {
    archivesBaseName = project.modId
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

configurations {
    implementation.extendsFrom(shade)
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

mixin {
    add sourceSets.main, "liquid.refmap.json"
}

minecraft {
    mappings channel: 'official', version: "${mc_ver}"

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            arg "-mixin.config=liquid.mixins.json"
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            mods {
                liquidcore {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            arg "-mixin.config=liquid.mixins.json"
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            mods {
                liquidcore {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'liquid', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                liquidcore {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven {
        name = "Dv8tion maven"
        url = "https://m2.dv8tion.net/releases"
    }
    maven { url = "https://repo.repsy.io/mvn/algorithmlx/algomaven" }
    maven { url = 'https://maven.minecraftforge.net/' }
    mavenCentral()
    jcenter()
}

dependencies {
    annotationProcessor 'org.spongepowered:mixin:0.8:processor'

    minecraft "net.minecraftforge:forge:${ForgeVersion}"

    jarJar(group: 'org.hjson', name: 'hjson', version: '3.0.0') {
        jarJar.ranged(it, "[3.0,)")
    }
    jarJar fg.deobf(group: 'com.github.glitchfiend', name: 'TerraBlender-forge', version: "$mc_ver-2.+") {
        jarJar.ranged(it, "[2.1.0.134,)")
    }
    jarJar fg.deobf("com.algorithmlx:LiquidKT:1.1") {
        jarJar.ranged(it, "[1.1,)")
    }

    jarJar("net.sf.jni4net:jni4net.j:0.8.8.0") {
        jarJar.ranged(it, "[0.8,)")
    }

    implementation("net.sf.jni4net:jni4net.j:0.8.8.0")
}

afterEvaluate {
    tasks.configureReobfTaskForReobfJar.mustRunAfter(tasks.compileJava)
}

compileJava {
    options.compilerArgs = ['-Xdiags:verbose']
}

jar {
    from {
        configurations.shade.collect { it.isDirectory() ? it : zipTree(it) }
    }

    classifier = 'slim'

    manifest {
        attributes([
                "Specification-Title"     : archivesBaseName,
                "Specification-Vendor"    : "AlgorithmLX",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.version,
                "Implementation-Vendor"   : "AlgorithmLX",
                "MixinConfigs"            : "liquid.mixins.json",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

java {
    withSourcesJar()
    withJavadocJar()
}

void addLicense(jarTask) {
    jarTask.from('LICENSE') {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

jar.finalizedBy('reobfJar')

addLicense(jar)
addLicense(tasks.jarJar)

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            jarJar.component(it)

            artifactId project.archivesBaseName
        }
    }

    repositories {
        maven {
            url mavenUrl
            credentials {
                username mavenUsername
                password mavenPassword
            }
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}