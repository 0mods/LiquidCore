////file:noinspection all
//buildscript {
//    dependencies {
//        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
//    }
//}
//
//plugins {
//    id "com.modrinth.minotaur" version "2.+"
//    id "com.matthewprenger.cursegradle" version "1.4.0"
//    id "dev.combination.dotnet" version "1.0.14"
//    id "org.jetbrains.kotlin.jvm" version "1.7.10"
//    id "org.jetbrains.kotlin.plugin.serialization" version "1.7.10"
//    id "net.minecraftforge.gradle" version "5.+"
//}
//
//apply plugin: 'net.minecraftforge.gradle'
//apply plugin: 'org.spongepowered.mixin'
//apply plugin: 'maven-publish'
//apply plugin: 'kotlin'
//
//String mod_version_full = "${mc_ver}_${ver}"
//String ForgeVersion = "${mc_ver}-${forge_ver}"
//String ReleaseType = "$rtype"
//
//group = 'com.algorithmlx'
//version = "${mod_version_full}"
//
//java {
//    archivesBaseName = modId
//    toolchain.languageVersion = JavaLanguageVersion.of(17)
//}
//
//configurations {
//    implementation.extendsFrom(shade)
//}
//
//minecraft {
//    mappings channel: 'official', version: "${mc_ver}"
//
//    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
//
//    runs {
//        client {
//            workingDirectory project.file('run')
//
//            property 'forge.logging.markers', 'REGISTRIES'
//
//            arg "-mixin.config=liquid.mixins.json"
//
//            property 'forge.logging.console.level', 'debug'
//
//            property 'mixin.env.remapRefMap', 'true'
//
//            property 'mixin.env.refMapRemappingFile',"${buildDir}/createSrgToMcp/output.srg"
//
//            mods {
//                liquidcore {
//                    source sourceSets.main
//                }
//            }
//        }
//
//        server {
//            workingDirectory project.file('run')
//
//            property 'forge.logging.markers', 'REGISTRIES'
//
//            arg "-mixin.config=liquid.mixins.json"
//
//            property 'forge.logging.console.level', 'debug'
//
//            property 'mixin.env.remapRefMap', 'true'
//
//            property 'mixin.env.refMapRemappingFile',"${buildDir}/createSrgToMcp/output.srg"
//
//            mods {
//                liquidcore {
//                    source sourceSets.main
//                }
//            }
//        }
//
//        data {
//            workingDirectory project.file('run')
//
//            property 'forge.logging.markers', 'REGISTRIES'
//
//            property 'forge.logging.console.level', 'debug'
//
//            args '--mod', 'liquid', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
//
//            mods {
//                liquidcore {
//                    source sourceSets.main
//                }
//            }
//        }
//    }
//}
//
//mixin {
//    add sourceSets.main, "liquid.refmap.json"
//}
//
//sourceSets.main.resources { srcDir 'src/generated/resources' }
//
//repositories {
//    maven {
//        name = "Dv8tion maven"
//        url = "https://m2.dv8tion.net/releases"
//    }
//
//    mavenCentral()
//    jcenter()
//}
//
//dependencies {
//    annotationProcessor 'org.spongepowered:mixin:0.8:processor'
//
//    minecraft "net.minecraftforge:forge:${ForgeVersion}"
//
////    jarJar fg.deobf(group: 'com.github.glitchfiend', name: 'TerraBlender-forge', version: '1.19-2.0.0.117') {
////        jarJar.ranged(it, "[2.0,3.0)")
////    }
//
//    shade 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.7.10'
//    shade 'org.jetbrains.kotlin:kotlin-reflect:1.7.10'
//    shade 'org.jetbrains:annotations:23.0.0'
//
//    jarJar(group: 'org.hjson', name: 'hjson', version: '3.0.0') {
//        jarJar.ranged(it, "[3.0,)")
//    }
//}
//
//jar {
//    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
//
//    from sourceSets.main.output
//
//    exclude()
//
//    from { configurations.shade.collect { it.isDirectory() ? it : zipTree(it) } }
//
//    manifest {
//        attributes([
//                "Specification-Title"     : archivesBaseName,
//                "Specification-Vendor"    : "AlgorithmLX",
//                "Specification-Version"   : "1",
//                "Implementation-Title"    : project.name,
//                "Implementation-Version"  : project.jar.archiveVersion,
//                "Implementation-Vendor"   : "AlgorithmLX",
//                "MixinConfigs"            : "liquid.mixins.json",
//                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
//        ])
//    }
//}
//
//jar.finalizedBy('reobfJar')
//
//apply plugin: "java"
//tasks.withType(JavaCompile) {
//    options.encoding = "UTF-8"
//}
//
//publishing {
//    publications {
//        mavenJava(MavenPublication) {
//            from components.java
//            jarJar.component(it)
//
//            artifactId project.archivesBaseName
//        }
//    }
//
//    repositories {
//        maven {
//            url mavenUrl
//            credentials {
//                username mavenUsername
//                password mavenPassword
//            }
//        }
//    }
//}
//
////modrinth {
////    token = modrinthToken
////    projectId = modtinthLiquidId
////    versionNumber = "$ver"
////    versionType = ReleaseType
////    uploadFile = jar
////    gameVersions = [
////            "$mc_ver"
////    ]
////    loaders = [
////            "forge"
////    ]
////
////}
//
//tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
//    kotlinOptions {
//        freeCompilerArgs = Arrays.asList("-Xjvm-default=all", "-Xopt-in=kotlin.RequiresOptIn")
//        jvmTarget = "17"
//        languageVersion = "1.5"
//    }
//}
//compileKotlin {
//    kotlinOptions {
//        languageVersion = "1.5"
//    }
//}
buildscript {
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id "com.modrinth.minotaur" version "2.+"
    id "com.matthewprenger.cursegradle" version "1.4.0"
    id "dev.combination.dotnet" version "1.0.14"
    id "org.jetbrains.kotlin.jvm" version "1.7.10"
    id "org.jetbrains.kotlin.plugin.serialization" version "1.7.10"
    id "net.minecraftforge.gradle" version "5.+"
}

allprojects {
    apply plugin: 'net.minecraftforge.gradle'
    apply plugin: 'org.spongepowered.mixin'
    apply plugin: 'maven-publish'
    apply plugin: 'kotlin'
    apply plugin: 'java'

    String mod_version_full = "${project.mc_ver}_${project.ver}"
    String ForgeVersion = "${project.mc_ver}-${project.forge_ver}"
    String ReleaseType = "$project.rtype"

    group = 'com.algorithmlx'
    version = "${mod_version_full}"

    java {
        archivesBaseName = project.modId
        toolchain.languageVersion = JavaLanguageVersion.of(17)
    }

    configurations {
        implementation.extendsFrom(shade)
    }

    minecraft {
        mappings channel: 'official', version: "${mc_ver}"
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

        runs {
            client {
                workingDirectory project.file('run')

                property 'forge.logging.markers', 'REGISTRIES'

                arg "-mixin.config=liquid.mixins.json"

                property 'forge.logging.console.level', 'debug'

                property 'mixin.env.remapRefMap', 'true'

                property 'mixin.env.refMapRemappingFile',"${buildDir}/createSrgToMcp/output.srg"

                mods {
                    liquidcore {
                        source sourceSets.main
                    }
                }
            }

            server {
                workingDirectory project.file('run')

                property 'forge.logging.markers', 'REGISTRIES'

                arg "-mixin.config=liquid.mixins.json"

                property 'forge.logging.console.level', 'debug'

                property 'mixin.env.remapRefMap', 'true'

                property 'mixin.env.refMapRemappingFile',"${buildDir}/createSrgToMcp/output.srg"

                mods {
                    liquidcore {
                        source sourceSets.main
                    }
                }
            }

            data {
                workingDirectory project.file('run')

                property 'forge.logging.markers', 'REGISTRIES'

                property 'forge.logging.console.level', 'debug'

                args '--mod', 'liquid', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

                mods {
                    liquidcore {
                        source sourceSets.main
                    }
                }
            }
        }
    }

    mixin {
        add sourceSets.main, "liquid.refmap.json"
    }

    sourceSets.main.resources { srcDir 'src/generated/resources' }

    repositories {
        maven {
            name = "Dv8tion maven"
            url = "https://m2.dv8tion.net/releases"
        }

        mavenCentral()
        jcenter()
    }

    dependencies {
        annotationProcessor 'org.spongepowered:mixin:0.8:processor'

        minecraft "net.minecraftforge:forge:${ForgeVersion}"

        shade 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.7.10'
        shade 'org.jetbrains.kotlin:kotlin-reflect:1.7.10'
        shade 'org.jetbrains:annotations:23.0.0'

        jarJar(group: 'org.hjson', name: 'hjson', version: '3.0.0') {
            jarJar.ranged(it, "[3.0,)")
        }
    }

    jar {
        duplicatesStrategy(DuplicatesStrategy.EXCLUDE)

        from sourceSets.main.output

        exclude()

        from { configurations.shade.collect { it.isDirectory() ? it : zipTree(it) } }

        manifest {
            attributes([
                "Specification-Title"     : archivesBaseName,
                "Specification-Vendor"    : "AlgorithmLX",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "AlgorithmLX",
                "MixinConfigs"            : "liquid.mixins.json",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
            ])
        }
    }

    jar.finalizedBy('reobfJar')

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            freeCompilerArgs = Arrays.asList("-Xjvm-default=all", "-Xopt-in=kotlin.RequiresOptIn")
            jvmTarget = "17"
            languageVersion = "1.5"
        }
    }
    compileKotlin {
        kotlinOptions {
            languageVersion = "1.5"
        }
    }
}

def depends(project, List<String> depName) {
    def dep = depName.iterator().collect { project.dependencies.project(path: ":$it", configuration: 'namedElements') }
    def clientOutputs = depName.iterator().collect { findProject(":$it").sourceSets.client.output }

    project.dependencies {
        deps.each {
            api it
        }

        clientOutputs.each {
            clientImplementation it
        }
    }
}

subprojects.each { subproject -> evaluationDependsOn(subproject.path)}

def mainProjects = [':adapter']
task oneJar( type: Jar , dependsOn: mainProjects.collect{ it+":compileJava"}) {
    baseName = 'name of jar'
    from files(mainProjects.collect{ project(it).sourceSets.main.output })
}